buildscript {
    repositories {
//        mavenLocal()
//        jcenter()
//        maven { url 'http://repo1.maven.org/maven2' }
        maven { url 'http://maven.oschina.net/content/groups/public/' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
    }
}

apply plugin: 'android'
apply plugin: 'maven'
apply plugin: 'com.android.application'

repositories {
//    mavenLocal()
    jcenter()
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd_hh_mm", TimeZone.getTimeZone("UTC"))
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
}

task copyNativeLibs(type: Copy) {
    from(new File('libs')) { include '**/*.so' }
    into new File(buildDir, 'native-libs')
}

tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn copyNativeLibs }

clean.dependsOn 'cleanCopyNativeLibs'

tasks.withType(com.android.build.gradle.tasks.PackageApplication) {
    pkgTask ->
        pkgTask.jniFolders = new HashSet<File>()
        pkgTask.jniFolders.add(new File(buildDir, 'native-libs'))
}
android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    /*defaultConfig {
        versionCode 99
        versionName "9.9.9"
        applicationId "cn.koolcloud.pos.prepaid"
    }*/

    defaultConfig {
        applicationId "cn.koolcloud.pos"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 48
        versionName "3.1.7"

        // dex out of 65535 limit
        multiDexEnabled true
        // umeng is default channel
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "umeng"]
    }

    signingConfigs {
        release {
            storeFile file("app.ks")
            keyAlias "appstorekey"
            storePassword "cooltool"
            keyPassword "cooltool"
        }

    }

    productFlavors {
        /*"default" {}
        google {}
        "91" {}
        hiapk {}
        gfan {}
        goapk {}
        appChina {}
        mumayi {}
        eoe {}
        nduo {}
        feiliu {}
        crossmo {}
        huawei {}
        QQ {}
        "3G" {}
        "360" {}
        baidu {}
        sohu {}
        "163" {}
        UC {}
        dangle {}
        samsung {}
        mmw {}
        xiaomi {}
        lenovo {}*/
        nearme {}
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    buildTypes {
        debug {
            // show Logs
            buildConfigField "boolean", "LOG_DEBUG", "true"

            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }

        release {
            // don't show Log
            buildConfigField "boolean", "LOG_DEBUG", "false"

            //run proguard
            minifyEnabled true
            zipAlignEnabled true

            // rm useless resource
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        // output apk file name with SmartPos_v1.0_2015-01-15_***.apk
                        def fileName = "SmartPos_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        /*Move the build types to build-types/<type>
        For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        This moves them out of them default location under src/<type>/... which would
        conflict with src/ being used by the main source set.
        Adding new build types or product flavors should be accompanied
        by a similar customization.*/
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}
